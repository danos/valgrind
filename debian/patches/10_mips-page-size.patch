Description: Determine page size at runtime on MIPS
Origin: upstream, https://bugs.kde.org/show_bug.cgi?id=342356
Bug: https://bugs.kde.org/show_bug.cgi?id=342356
Bug-Debian: http://bugs.debian.org/777669
Author: Maran Pakkirisamy
Last-Update: 2015-04-25

--- a/coregrind/m_main.c
+++ b/coregrind/m_main.c
@@ -1659,10 +1659,12 @@
    //   p: logging, plausible-stack
    //--------------------------------------------------------------
    VG_(debugLog)(1, "main", "Starting the address space manager\n");
-   vg_assert(VKI_PAGE_SIZE     == 4096 || VKI_PAGE_SIZE     == 65536
-             || VKI_PAGE_SIZE     == 16384);
-   vg_assert(VKI_MAX_PAGE_SIZE == 4096 || VKI_MAX_PAGE_SIZE == 65536
-             || VKI_MAX_PAGE_SIZE == 16384);
+   vg_assert(VKI_PAGE_SIZE    == 4096  || VKI_PAGE_SIZE == 8192
+             || VKI_PAGE_SIZE == 16384 || VKI_PAGE_SIZE == 32768
+             || VKI_PAGE_SIZE == 65536);
+   vg_assert(VKI_MAX_PAGE_SIZE    == 4096  || VKI_MAX_PAGE_SIZE == 8192
+             || VKI_MAX_PAGE_SIZE == 16384 || VKI_MAX_PAGE_SIZE == 32768
+             || VKI_MAX_PAGE_SIZE == 65536);
    vg_assert(VKI_PAGE_SIZE <= VKI_MAX_PAGE_SIZE);
    vg_assert(VKI_PAGE_SIZE     == (1 << VKI_PAGE_SHIFT));
    vg_assert(VKI_MAX_PAGE_SIZE == (1 << VKI_MAX_PAGE_SHIFT));
@@ -3180,11 +3182,12 @@
    the_iicii.sp_at_startup = (Addr)pArgc;
 
 #  if defined(VGP_ppc32_linux) || defined(VGP_ppc64be_linux) \
-      || defined(VGP_ppc64le_linux) || defined(VGP_arm64_linux)
+      || defined(VGP_ppc64le_linux) || defined(VGP_arm64_linux) \
+      || defined(VGP_mips32_linux)  || defined(VGP_mips64_linux)
    {
-      /* ppc32/ppc64 can be configured with different page sizes.
-         Determine this early.  This is an ugly hack and really should
-         be moved into valgrind_main. */
+      /* ppc32/ppc64, arm64, mips32/64 can be configured with different
+         page sizes. Determine this early. This is an ugly hack and really
+         should be moved into valgrind_main. */
       UWord *sp = &pArgc[1+argc+1];
       while (*sp++ != 0)
          ;
--- a/coregrind/m_vki.c
+++ b/coregrind/m_vki.c
@@ -39,11 +39,12 @@
    describing the kernel interface, so this file is nearly empty. */
 
 
-/* ppc32/64-linux determines page size at startup, hence m_vki is
-   the logical place to store that info. */
+/* {ppc32/64, arm64, mips32/64}-linux determine page size at startup,
+   hence m_vki is the logical place to store that info. */
 
 #if defined(VGP_ppc32_linux) || defined(VGP_ppc64be_linux) \
-    || defined(VGP_ppc64le_linux) || defined(VGP_arm64_linux)
+    || defined(VGP_ppc64le_linux) || defined(VGP_arm64_linux) \
+    || defined(VGP_mips32_linux)  || defined(VGP_mips64_linux)
 unsigned long VKI_PAGE_SHIFT = 12;
 unsigned long VKI_PAGE_SIZE  = 1UL << 12;
 #endif
--- a/include/vki/vki-mips32-linux.h
+++ b/include/vki/vki-mips32-linux.h
@@ -71,12 +71,13 @@
 // From linux-2.6.35.5/include/asm-mips/page.h
 //----------------------------------------------------------------------
 
-/* PAGE_SHIFT determines the page size */
-#define VKI_PAGE_SHIFT          MIPS_PAGE_SHIFT
-#define VKI_PAGE_SIZE           (1UL << VKI_PAGE_SHIFT)
+/* MIPS platforms support 4k/8k/16k/32k/64k pages, so we
+   use the at-startup detection scheme that ppc32/64 do. */
+extern UWord VKI_PAGE_SHIFT;
+extern UWord VKI_PAGE_SIZE;
 #define VKI_PAGE_MASK           (~(VKI_PAGE_SIZE-1))
-#define VKI_MAX_PAGE_SHIFT      VKI_PAGE_SHIFT
-#define VKI_MAX_PAGE_SIZE       VKI_PAGE_SIZE
+#define VKI_MAX_PAGE_SHIFT      16
+#define VKI_MAX_PAGE_SIZE       (1UL << VKI_MAX_PAGE_SHIFT)
 
 //----------------------------------------------------------------------
 // From linux-2.6.35.9/arch/mips/include/bits/shm.h
--- a/include/vki/vki-mips64-linux.h
+++ b/include/vki/vki-mips64-linux.h
@@ -80,12 +80,13 @@
 // From linux-2.6.35.9/include/asm-mips/page.h
 //----------------------------------------------------------------------
 
-/* PAGE_SHIFT determines the page size */
-#define VKI_PAGE_SHIFT  MIPS_PAGE_SHIFT
-#define VKI_PAGE_SIZE   (1UL << VKI_PAGE_SHIFT)
-#define VKI_PAGE_MASK   (~(VKI_PAGE_SIZE-1))
-#define VKI_MAX_PAGE_SHIFT      VKI_PAGE_SHIFT
-#define VKI_MAX_PAGE_SIZE       VKI_PAGE_SIZE
+/* MIPS platforms support 4k/8k/16k/32k/64k pages, so we
+   use the at-startup detection scheme that ppc32/64 do. */
+extern UWord VKI_PAGE_SHIFT;
+extern UWord VKI_PAGE_SIZE;
+#define VKI_PAGE_MASK           (~(VKI_PAGE_SIZE-1))
+#define VKI_MAX_PAGE_SHIFT      16
+#define VKI_MAX_PAGE_SIZE       (1UL << VKI_MAX_PAGE_SHIFT)
 
 //----------------------------------------------------------------------
 // From linux-2.6.35.9/arch/mips/include/bits/shm.h
--- a/memcheck/tests/unit_libcbase.c
+++ b/memcheck/tests/unit_libcbase.c
@@ -74,9 +74,11 @@
    CHECK( VG_STREQN(3, "abcd", "abce"));
 }
 
-// On PPC/Linux VKI_PAGE_SIZE is a variable, not a macro.
+/* On {PPC32/64/ARM64/MIPS32/64}/Linux, VKI_PAGE_SIZE is a variable,
+   not a macro. */
 #if defined(VGP_ppc32_linux) || defined(VGP_ppc64be_linux) \
-    || defined(VGP_ppc64le_linux)
+    || defined(VGP_ppc64le_linux) || defined(VGP_mips32_linux) \
+    || defined(VGP_mips64_linux)
 unsigned long VKI_PAGE_SIZE  = 1UL << 12;
 #elif defined(VGP_arm64_linux)
 unsigned long VKI_PAGE_SIZE  = 1UL << 16;
--- a/configure.ac
+++ b/configure.ac
@@ -806,32 +806,6 @@
 
 
 #----------------------------------------------------------------------------
-# Define MIPS_PAGE_SHIFT (--with-pagesize)
-#----------------------------------------------------------------------------
-AC_ARG_WITH(pagesize,
-   [  --with-pagesize=        override detected page size (4, 16 or 64)],
-   [psize=$withval],
-   [psize=0]
-)
- 
-if test "$psize" = "0"; then
-    psizer=`getconf PAGESIZE`
-    psize=$((${psizer}/1024))
-fi
-
-if test "$psize" = "4"; then
-    AC_DEFINE([MIPS_PAGE_SHIFT], 12, [configured page size 4k])
-elif test "$psize" = "16"; then
-    AC_DEFINE([MIPS_PAGE_SHIFT], 14, [configured page size 16k])
-elif test "$psize" = "64"; then
-    AC_DEFINE([MIPS_PAGE_SHIFT], 16, [configured page size 64k])
-else
-   AC_DEFINE([MIPS_PAGE_SHIFT], 12, [configured default page size 4k])
-fi
-AC_MSG_RESULT([checking for Pagesize... ${psize}k])
-
-
-#----------------------------------------------------------------------------
 # Extra fine-tuning of installation directories
 #----------------------------------------------------------------------------
 AC_ARG_WITH(tmpdir,
