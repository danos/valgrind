From: Luca Boccassi <DL-vyatta-help@att.com>
Date: Thu, 5 Nov 2015 11:50:47 +0000
Subject: Refactor (MC_)realloc to support alignment

Add static helper handle_realloc that takes an alignment parameter
---
 memcheck/mc_malloc_wrappers.c |   17 ++++++++++++-----
 1 file changed, 12 insertions(+), 5 deletions(-)

--- a/memcheck/mc_malloc_wrappers.c
+++ b/memcheck/mc_malloc_wrappers.c
@@ -531,16 +531,14 @@
       tid, (Addr)p, MC_(Malloc_Redzone_SzB), MC_AllocNewVec);
 }
 
-void* MC_(realloc) ( ThreadId tid, void* p_old, SizeT new_szB )
+static
+void* renew_block ( ThreadId tid, void* p_old, SizeT new_szB, SizeT alignB )
 {
    MC_Chunk* old_mc;
    MC_Chunk* new_mc;
    Addr      a_new; 
    SizeT     old_szB;
 
-   if (MC_(record_fishy_value_error)(tid, "realloc", "size", new_szB))
-      return NULL;
-
    cmalloc_n_frees ++;
    cmalloc_n_mallocs ++;
    cmalloc_bs_mallocd += (ULong)new_szB;
@@ -564,7 +562,7 @@
    old_szB = old_mc->szB;
 
    /* Get new memory */
-   a_new = (Addr)VG_(cli_malloc)(VG_(clo_alignment), new_szB);
+   a_new = (Addr)VG_(cli_malloc)(alignB, new_szB);
 
    if (a_new) {
       /* In all cases, even when the new size is smaller or unchanged, we
@@ -645,6 +643,15 @@
    return (void*)a_new;
 }
 
+void* MC_(realloc) ( ThreadId tid, void* p_old, SizeT new_szB )
+{
+   if (MC_(record_fishy_value_error)(tid, "realloc", "size", new_szB)) {
+      return NULL;
+   } else {
+      return renew_block ( tid, p_old, new_szB, VG_(clo_alignment) );
+   }
+}
+
 SizeT MC_(malloc_usable_size) ( ThreadId tid, void* p )
 {
    MC_Chunk* mc = VG_(HT_lookup) ( MC_(malloc_list), (UWord)p );
